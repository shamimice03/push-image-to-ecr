name: Build and Push Image to ECR Prod Repo

on: 
  push:
    branches: 
      - main
    paths-ignore:
        - '**/README.md'
  pull_request:
    types:
      - closed
  workflow_dispatch:

jobs:
  unit_test:
    if:  github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: Production
    runs-on: ubuntu-latest
    steps:
    - name: Download Code
      uses: actions/checkout@v3
    - name: Set up Golang
      uses: actions/setup-go@v4
      with:
        go-version-file: go.mod
    - name: Unit Test
      run: go test -v .

  build_and_push_image:
      needs: ["unit_test"]
      if: success()
      environment: Production
      runs-on: ubuntu-latest
  
      # These permissions are needed to interact with GitHub's OIDC Token endpoint.
      permissions:
          id-token: write
          contents: read
      env:
          IMAGE_TAG: ${{ github.sha }}
      steps:
          - name: Download Code
            uses: actions/checkout@v3
  
          - name: Set up Golang
            uses: actions/setup-go@v4
            with:
              go-version-file: go.mod
  
          - name: Configure AWS credentials 
            uses: aws-actions/configure-aws-credentials@v2
            with:
              role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
              aws-region: ${{ secrets.AWS_REGION }}
  
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
  
          - name: Setting up environment variables
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              REPOSITORY: ${{ vars.PROD_ECR_REPO }}
              IMAGE_TAG: ${{ github.sha }}
            run: |
              echo "IMAGE_REF=${{ steps.login-ecr.outputs.registry }}/${{ vars.PROD_ECR_REPO }}:${{ github.sha }}" >> $GITHUB_ENV
  
          - name: Build and Tag Docker Image
            id: build_step
            run: |
              docker build -t $IMAGE_REF .
          
          - name: Run Trivy vulnerability scanner
            env:
              IMAGE_REF: ${{ steps.login-ecr.outputs.registry }}/${{ vars.PROD_ECR_REPO }}:${{ github.sha }}
            uses: aquasecurity/trivy-action@master
            with:
                image-ref: ${{ env.IMAGE_REF }}
                format: 'table'
                exit-code: '1'
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'CRITICAL,HIGH'
  
          - name: push docker image to Amazon ECR
            run: |
                docker push $IMAGE_REF